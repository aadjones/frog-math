export interface MathConcept {
  id: string;
  frogMathName: string;
  standardMathName: string;
  frogMathDescription: string;
  standardMathDescription: string;
  frogMathFormula: string;
  standardMathFormula: string;
  category: "foundations" | "divisibility" | "euclid" | "mod-arithmetic";
}

export const mathConcepts: MathConcept[] = [
  {
    id: "pads",
    frogMathName: "River",
    standardMathName: "Integers",
    frogMathDescription: "The set of lily pads in the river.",
    standardMathDescription: "The set of integers, $\\mathbb{Z}$.",
    category: "foundations",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "fly-set",
    frogMathName: "Fly Set",
    standardMathName: "Multiples",
    frogMathDescription:
      "The set of lily pads an $a$-hopper can reach.",
    standardMathDescription: "The ideal $a\\mathbb{Z} = \\{ka \\mid k \\in \\mathbb{Z}\\}$.",
    category: "foundations",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "mimicry",
    frogMathName: "Mimicry",
    standardMathName: "Divisibility",
    frogMathDescription:
      "Alice the frog can <b>mimic</b> Bob if Alice can reach any lily pad that Bob can reach. (Alternatively, Alice's fly set is a superset of Bob's fly set.)",
    standardMathDescription:
      "$a$ <b>divides</b> $b$ if there exists $k \\in \\mathbb{Z}$ such that $b = k \\cdot a$. (Alternatively, $a\\mathbb{Z} \\supseteq b\\mathbb{Z}$.)",
    category: "divisibility",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "linear-combinations",
    frogMathName: "Hop Combos",
    standardMathName: "Linear Combinations",
    frogMathDescription:
      "If Alice the $a$-hopper can reach lily pad $b$ and lily pad $c$, then she can reach $b + c$.",
    standardMathDescription:
      "If $a \\mid b$ and $a \\mid c$, then $a \\mid b + c$.",
    category: "divisibility",
    frogMathFormula:
      "<b>Proof:</b> First Alice reaches lily pad $b$. From there, pretending that she is at the origin, she hops to $c$, putting her at lily pad $b + c$.",
    standardMathFormula:
      "<b>Proof:</b> Let $b = k_1 \\cdot a$ and $c = k_2 \\cdot a$ for some $k_1, k_2 \\in \\mathbb{Z}$. Then $b + c = (k_1 + k_2) \\cdot a$, so $a \\mid b + c$.",
  },
  {
    id: "primes",
    frogMathName: "Immimicable frogs",
    standardMathName: "Prime numbers",
    frogMathDescription:
      "Percy the $p$-hopper ($p > 1$) is <b>immimicable</b> if he can only be mimicked by $1$-hoppers or $p$-hoppers.",
    standardMathDescription:
      "A <b>prime number</b> $p$ is a number that has exactly two positive divisors: $1$ and $p$.",
    category: "divisibility",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "primes-factors",
    frogMathName: "Fundamental Theorem of Mimicry",
    standardMathName: "Existence of prime factors",
    frogMathDescription:
      "Every frog, other than a $1$-hopper, can be mimicked by an immimicable frog.",
    standardMathDescription:
      "Every integer greater than $1$ can be written as a product of prime numbers.",
    category: "divisibility",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "multi-hoppers",
    frogMathName: "Multihoppers",
    standardMathName: "Linear Diophantine Equations",
    frogMathDescription:
      "A baby frog whose parents are $a$-hoppers and $b$-hoppers is an $(a, b)$-multihopper. (It inherits both powers of its parents.)",
    standardMathDescription:
      "The ideal generated by $a$ and $b$ is the set of all linear combinations of $a$ and $b$.",
    category: "euclid",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "euclid",
    frogMathName: "Multihopper Reduction",
    standardMathName: "The Euclidean Algorithm",
    frogMathDescription:
      "The process of discovering the smallest hop that an $(a, b)$-multihopper can mimic.",
    standardMathDescription:
      "The algorithm that recursively divides the larger number by the smaller number and takes the remainder, terminating with the greatest common divisor.",
    category: "euclid",
    frogMathFormula:
      "<b>Motivation:</b> An $(a,b)$-multihopper can mimic an $a-b$ hop, so it can mimic a $(b, a-b)$-hopper. Repeat this process until the two hop amounts are the same.",
    standardMathFormula: "",
  },
  {
    id: "euclid",
    frogMathName: "Fundamental Theorem of Multihoppers",
    standardMathName: "Bézout's Identity",
    frogMathDescription:
      "The relationship between the fly set of a multihopper and the fly set of a single-hopper.",
    standardMathDescription:
      "If $a$ and $b$ have greatest common divisor $d$, then the integers of the form $ax + by$ are exactly the multiples of $d$.",
    category: "euclid",
    frogMathFormula:
      "<b>Motivation:</b> Apply multihopper reduction to the $(a,b)$-multihopper until it is reduced to mimicking a $(d, d)$-hopper.",
    standardMathFormula: "",
  },
  {
    id: "mods",
    frogMathName: "Pond Hoppers",
    standardMathName: "Modular Arithmetic",
    frogMathDescription:
      "Frogs hopping around a circular pond of $n$ lily pads.",
    standardMathDescription: "Arithmetic with remainders when dividing by $n$.",
    category: "mod-arithmetic",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "congruences",
    frogMathName: "Lily Classes",
    standardMathName: "Congruence Classes",
    frogMathDescription:
      "Lily pads $a$ and $b$ are in the same lily class if an $n$-hopping river frog can get from $a$ to $b$.",
    standardMathDescription:
      "$a \\equiv b \\pmod{n}$ if $a$ and $b$ have the same remainder when divided by $n$.",
    category: "mod-arithmetic",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "congruences-properties",
    frogMathName: "Flügenfröger",
    standardMathName: "Multiplicative Inverses",
    frogMathDescription:
      "An $a$-hopper on the $n$-pond is a <b>flügenfrögen</b> if he can reach any lily pad.",
    standardMathDescription:
      "$a$ has a multiplicative inverse modulo $n$ if there exists an integer $b$ such that $ab \\equiv 1 \\pmod{n}$.",
    category: "mod-arithmetic",
    frogMathFormula: "",
    standardMathFormula: "",
  },
  {
    id: "congruences-properties",
    frogMathName: "Flügenfröger Closure",
    standardMathName: "Properties of Multiplicative Inverses",
    frogMathDescription: "The product of two flügenfröger is a flügenfrögen.",
    standardMathDescription:
      "If $a$ and $b$ have multiplicative inverses modulo $n$, then $ab$ has a multiplicative inverse modulo $n$.",
    category: "mod-arithmetic",
    frogMathFormula:
      "<b>Proof:</b> Suppose we are out an an $n$ lily pad pond, and we have two flügenfröger, an $a$-hopper and a $b$-hopper. One day, $a$ and her friend $ab$ start hopping in sync. The $a$-hopper hops until she reaches $1$. The $ab$-hopper therefore reaches $b$. Thus, the $ab$-hopper can mimic a $b$-hopper. Since the $b$-hopper is a flügenfrögen, this means the $ab$-hopper is a flügenfrögen.",
    standardMathFormula:
      "<b>Proof:</b> Let $x$ be the multiplicative inverse of $a$ modulo $n$. Then $ax \\equiv 1 \\pmod{n}$. Let $y$ be the multiplicative inverse of $b$ modulo $n$. Then $by \\equiv 1 \\pmod{n}$. Then $(ab)(yx) \\equiv a(by)x \\equiv ax \\equiv 1 \\pmod{n}$. This means $yx$ is the multiplicative inverse of $ab$ modulo $n$.",
  },
  {
    id: "chinese-remainder-theorem",
    frogMathName: "The Reunion of the Parents",
    standardMathName: "Chinese Remainder Theorem",
    frogMathDescription:
      "Two frogs that are not co-mimicable on the river can always be reunited.",
    standardMathDescription:
      "If $a$ and $b$ are co-prime, then the system of congruences $x \\equiv s \\pmod{a}$ and $x \\equiv t \\pmod{b}$ has a solution.",
    category: "mod-arithmetic",
    frogMathFormula:
      "<b>Proof:</b> Suppose the parents are $a$ and $b$. Since they are not co-mimicable, their baby can make any displacement using a combination of $a$ and $b$ hops. The baby first makes her way over to wherever $a$ is sitting. Then the baby calculates how many $a$ hops and $b$ hops she would need in order to get to wherever $b$ is sitting. Then, the baby and $a$ do a hop-along. After that, $b$ does a reverse hop-along. At the end, everyone is on the same lily pad.",
    standardMathFormula:
      "<b>Proof:</b> By Bezout's identity, there exist integers $u$ and $v$ such that $au + bv = 1$. Then let $x = sbv + tau$. Then $x = s(1 - au) + tau = s + (t - s)au$, which shows that $x \\equiv s \\pmod{a}.$ By similar reasoning, $x \\equiv t \\pmod{b}$.",
  },
];

export const conceptCategories = {
  foundations: "Foundations",
  divisibility: "Divisibility",
  euclid: "The Euclidean Algorithm",
  "mod-arithmetic": "Modular Arithmetic",
} as const;
